Components Required:
  Arduino Board
  PIR (Passive Infrared) Sensor
  LED
  220-ohm Resistor (for the LED)
  Connecting Wires
  Breadboard (optional)
  
Theory:
PIR Sensor: The PIR sensor detects infrared light emitted by objects, particularly humans, within its range. When motion is detected, the sensor’s output pin goes HIGH, 
and when no motion is detected, it goes LOW.
Applications: PIR sensors are widely used in security systems, automatic lighting systems, and other applications where motion detection is essential.

Circuit Connections:
PIR Sensor:
GND (Ground) → Connect to the Arduino’s GND pin.
VCC (Power) → Connect to the 5V pin on the Arduino.
OUT (Signal) → Connect to Digital Pin 2 on the Arduino.
LED:
Anode (+) → Connect to Digital Pin 13 (or any other available digital pin) on the Arduino through a 220-ohm resistor.
Cathode (-) → Connect to GND on the Arduino.




const int pirPin = 2;  // PIR sensor connected to digital pin 2
const int ledPin = 13; // LED connected to digital pin 13
int motionState = LOW; // Variable to store PIR state (HIGH for motion, LOW for no motion)

void setup() {
  pinMode(pirPin, INPUT);      // Set PIR sensor pin as input
  pinMode(ledPin, OUTPUT);     // Set LED pin as output
  Serial.begin(9600);          // Begin serial communication at 9600 baud
}

void loop() {
  motionState = digitalRead(pirPin); // Read the PIR sensor output

  if (motionState == HIGH) {         // Check if motion is detected
    digitalWrite(ledPin, HIGH);      // Turn on the LED
    Serial.println("Motion detected!"); // Print motion detected message
    delay(1000);                     // Wait 1 second
  } else {
    digitalWrite(ledPin, LOW);       // Turn off the LED
    Serial.println("No motion detected."); // Print no motion message
  }
}






Code Explanation
Variable Declarations:

pirPin and ledPin are constant integers holding the pin numbers for the PIR sensor and LED, respectively.
motionState is a variable that stores the current state of the PIR sensor.
setup() Function:

pinMode(pirPin, INPUT);: Configures the PIR sensor pin as an input to read its state.
pinMode(ledPin, OUTPUT);: Configures the LED pin as an output to control the LED.
Serial.begin(9600);: Starts serial communication at 9600 baud for debugging.
loop() Function:

motionState = digitalRead(pirPin);: Reads the digital state of the PIR sensor. If it detects motion, it outputs HIGH; otherwise, it outputs LOW.
if (motionState == HIGH): Checks if the PIR sensor detected motion.
If motion is detected (motionState is HIGH), it turns on the LED and prints "Motion detected!" to the Serial Monitor.
delay(1000);: Introduces a 1-second delay, preventing multiple readings and rapid toggling of the LED and message.
If no motion is detected (motionState is LOW), it turns off the LED and prints "No motion detected."
Working Explanation
When the PIR sensor detects motion (e.g., a person entering the sensor’s range), it sends a HIGH signal.
The Arduino receives this signal, turns on the LED, and displays "Motion detected!" on the Serial Monitor.
When no motion is detected, the sensor’s signal is LOW, so the LED is turned off, and "No motion detected." is printed.
This program runs continuously, updating the Serial Monitor and LED based on the PIR sensor’s readings.
