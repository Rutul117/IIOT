'''
Here’s how to wire up the components for the ESP32 LED Web Server to control the LEDs through the web interface:

Required Components:
ESP32 Development Board
2x LED
2x 220Ω Resistor
Breadboard
Jumper Wires
USB Cable (to connect the ESP32 to the computer)
Connections for the LEDs:
LED 1 (GPIO 12):
Resistor: Connect one end of a 220Ω resistor to GPIO 12 of the ESP32.
LED: Connect the other end of the resistor to the anode (long leg) of the first LED.
Ground (GND): Connect the cathode (short leg) of the LED to the GND pin on the ESP32.
LED 2 (GPIO 14):
Resistor: Connect one end of a 220Ω resistor to GPIO 14 of the ESP32.
LED: Connect the other end of the resistor to the anode (long leg) of the second LED.
Ground (GND): Connect the cathode (short leg) of the LED to the GND pin on the ESP32
'''

#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ESPAsyncTCP.h>
#include <FS.h>    
#include <SPIFFS.h>  

// #include <WebServer.h>

// Replace with your network credentials
const char *ssid = "Bhosale";
const char *password = "rutul1107";

// Create an instance of the WebServer
WebServer server(80);

// GPIO Pin where LED is connected
const int ledPin = 12; 

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Define routes for controlling the LED
  server.on("/led/on", HTTP_GET, [](){
    digitalWrite(ledPin, HIGH);
    server.send(200, "text/plain", "LED ON");
  });

  server.on("/led/off", HTTP_GET, [](){
    digitalWrite(ledPin, LOW);
    server.send(200, "text/plain", "LED OFF");
  });

  // Start the server
  server.begin();
}

void loop() {
  // Handle incoming HTTP requests
  server.handleClient();
}
