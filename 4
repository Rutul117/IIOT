Hardware Requirements:
  ESP32-WROOM-32 board
  Micro USB Data Cable
  Breadboard
  Potentiometer (10K)
  Male-to-Female jumper wires
  Laptop/PC

Theory:
This experiment is designed to use the ESP32 microcontroller as a web server. It reads the value from a potentiometer and displays this value on a webpage hosted by the ESP32. 
The potentiometer's analog value will be read by the ESP32, and this value can be displayed on a simple web server page, which can be accessed from a web browser.

Additionally, this experiment involves the concept of sending the sensor data to the cloud and storing it in a database (although this is not explicitly detailed in the code below, 
cloud storage implementation will follow the same principles).


Connections:
  Connecting the ESP32:
    Plug the ESP32 into the laptop/PC via a micro USB cable.
    The blue LED on the ESP32 will glow to indicate power.
  Potentiometer Wiring:
    Middle Pin (Yellow) of the potentiometer → GPIO 34 (Analog Pin of ESP32)
    Red Pin → 3.3V
    Orange Pin → Ground








#include <WiFi.h>           // Library for Wi-Fi functionality
#include <WebServer.h>       // Library for creating a web server

// Replace with your network credentials
const char* ssid = "your-SSID"; 
const char* password = "your-PASSWORD";

// Potentiometer pin (GPIO 34 for ESP32)
const int potPin = 34;      
int potValue = 0;           // Variable to store potentiometer value

// Create an instance of the WebServer on port 80
WebServer server(80); 

// Root URL handler to display potentiometer value
void handleRoot() {
  String html = "<html><body>";
  html += "<h1>Potentiometer Value</h1>";
  html += "<p>Current Potentiometer Value: ";
  html += String(potValue);  // Display potentiometer value
  html += "</p>";
  html += "</body></html>";
  server.send(200, "text/html", html);  // Send HTML page with potentiometer value
}

void setup() {
  // Start Serial Monitor for debugging
  Serial.begin(115200);
  
  // Set potentiometer pin as input
  pinMode(potPin, INPUT);

  // Connect to Wi-Fi network
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");

  // Wait for Wi-Fi connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  // Print the IP address after successful connection
  Serial.println();
  Serial.print("Connected to WiFi, IP address: ");
  Serial.println(WiFi.localIP());

  // Define the behavior when the root URL ("/") is accessed
  server.on("/", HTTP_GET, handleRoot);

  // Start the web server
  server.begin();
}

void loop() {
  // Read potentiometer value
  potValue = analogRead(potPin);

  // Handle incoming HTTP requests
  server.handleClient();

  // Delay to avoid excessive server processing
  delay(100);
}















Code Breakdown:
Libraries:

WiFi.h: This library allows ESP32 to connect to a Wi-Fi network.
WebServer.h: This library helps create a simple HTTP web server on the ESP32.
Global Variables:

ssid and password: Store the Wi-Fi network's credentials.
potPin: GPIO pin to which the potentiometer is connected.
potValue: Stores the potentiometer's analog value.
WebServer Object:

WebServer server(80): The web server listens on port 80 (default HTTP port).
handleRoot() Function:

Displays an HTML page showing the current potentiometer value.
setup() Function:

Initializes serial communication for debugging.
Sets the potentiometer pin as input.
Attempts to connect to Wi-Fi using the provided credentials.
Configures the root URL ("/") to display the potentiometer value.
Starts the web server.
loop() Function:

Reads the potentiometer value (analogRead(potPin)).
Handles incoming client requests (such as accessing the web server).
Implements a short delay to prevent excessive server processing.

